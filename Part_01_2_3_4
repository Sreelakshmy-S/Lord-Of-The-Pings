import networkx as nx
import matplotlib.pyplot as plt
import random
import numpy as np

random.seed(42)  # For consistent results
np.random.seed(42)

# Define node types
node_types = {
    'classical': ['A', 'B', 'C', 'D', 'E'],
    'quantum': ['F', 'G', 'H', 'I', 'J']
}

G = nx.Graph()

# Add nodes
for node in node_types['classical']:
    G.add_node(node, type='classical', entanglement_storage=False)

for node in node_types['quantum']:
    G.add_node(node, type='quantum', entanglement_storage=True)

# Define edge list with physically valid links
edges = [
    # Classical ↔ Classical
    ('A', 'B', 'classical'), 
    ('B', 'C', 'classical'),
    ('C', 'D', 'classical'),
    ('D', 'E', 'classical'),

    # Quantum ↔ Quantum
    ('F', 'G', 'quantum'),
    ('F', 'H', 'quantum'),
    ('G', 'H', 'quantum'),
    ('H', 'I', 'quantum'),
    ('I', 'J', 'quantum'),

    # Classical ↔ Quantum (converted to classical)
    ('A', 'F', 'classical'),
    ('E', 'G', 'classical'),
    ('J', 'D', 'classical'),
    ('B', 'I', 'classical'),
    ('C', 'H', 'classical'),
    ('E', 'J', 'classical')
]

# Enhanced cost calculation functions
def calculate_quantum_cost(distance, base_decoherence_rate, link_weight, environmental_factor=1.0):
    """
    Calculate comprehensive quantum link cost based on multiple factors
    
    Args:
        distance: Physical distance in km
        base_decoherence_rate: Base decoherence rate per km
        link_weight: Additional weight factor (hardware quality, congestion, etc.)
        environmental_factor: Environmental conditions affecting decoherence
    
    Returns:
        Total cost for quantum link
    """
    # Distance-based decoherence
    distance_cost = distance * base_decoherence_rate
    
    # Link quality cost (higher weight = lower quality = higher cost)
    quality_cost = link_weight * 0.1
    
    # Environmental factor (temperature, electromagnetic interference, etc.)
    env_cost = environmental_factor * 0.05
    
    # Quantum-specific penalties
    entanglement_setup_cost = 0.2  # Time to establish entanglement
    
    total_cost = distance_cost + quality_cost + env_cost + entanglement_setup_cost
    return total_cost

def calculate_classical_cost(latency, packet_loss_prob, link_weight, bandwidth_factor=1.0):
    """
    Calculate comprehensive classical link cost
    
    Args:
        latency: Link latency in ms
        packet_loss_prob: Probability of packet loss
        link_weight: Additional weight factor
        bandwidth_factor: Available bandwidth factor
    
    Returns:
        Total cost for classical link
    """
    # Latency cost (normalized)
    latency_cost = latency / 100.0  # Normalize to 0-1 range
    
    # Packet loss cost
    loss_cost = packet_loss_prob * 2.0  # Amplify packet loss impact
    
    # Link quality cost
    quality_cost = link_weight * 0.05
    
    # Bandwidth cost (lower bandwidth = higher cost)
    bandwidth_cost = (2.0 - bandwidth_factor) * 0.1
    
    total_cost = latency_cost + loss_cost + quality_cost + bandwidth_cost
    return total_cost

# Add edges with enhanced attributes and cost calculation
for u, v, link_type in edges:
    if link_type == 'quantum':
        # Ensure both nodes are quantum
        if G.nodes[u]['type'] == 'quantum' and G.nodes[v]['type'] == 'quantum':
            distance = random.randint(10, 100)
            base_decoherence_rate = random.uniform(0.008, 0.015)
            link_weight = random.uniform(0.5, 2.0)  # Hardware quality factor
            environmental_factor = random.uniform(0.8, 1.5)  # Environmental conditions
            ent_swap_fail_prob = random.uniform(0.05, 0.2)
            
            # Calculate total quantum cost
            total_cost = calculate_quantum_cost(distance, base_decoherence_rate, 
                                              link_weight, environmental_factor)
            
            G.add_edge(u, v,
                       type='quantum',
                       distance=distance,
                       base_decoherence_rate=base_decoherence_rate,
                       link_weight=link_weight,
                       environmental_factor=environmental_factor,
                       ent_swap_fail_prob=ent_swap_fail_prob,
                       total_cost=total_cost,
                       weight=total_cost)  # NetworkX uses 'weight' for shortest path
        else:
            # Convert invalid quantum link to classical
            latency = random.randint(10, 50)
            packet_loss_prob = random.uniform(0.01, 0.1)
            link_weight = random.uniform(0.5, 2.0)
            bandwidth_factor = random.uniform(0.8, 1.5)
            
            total_cost = calculate_classical_cost(latency, packet_loss_prob, 
                                                link_weight, bandwidth_factor)
            
            G.add_edge(u, v,
                       type='classical',
                       latency=latency,
                       packet_loss_prob=packet_loss_prob,
                       link_weight=link_weight,
                       bandwidth_factor=bandwidth_factor,
                       total_cost=total_cost,
                       weight=total_cost)
    else:  # classical
        latency = random.randint(10, 50)
        packet_loss_prob = random.uniform(0.01, 0.1)
        link_weight = random.uniform(0.5, 2.0)
        bandwidth_factor = random.uniform(0.8, 1.5)
        
        total_cost = calculate_classical_cost(latency, packet_loss_prob, 
                                            link_weight, bandwidth_factor)
        
        G.add_edge(u, v,
                   type='classical',
                   latency=latency,
                   packet_loss_prob=packet_loss_prob,
                   link_weight=link_weight,
                   bandwidth_factor=bandwidth_factor,
                   total_cost=total_cost,
                   weight=total_cost)

# ------------------ Enhanced Simulation Functions ------------------ #

def simulate_quantum_link(u, v, G):
    edge = G[u][v]
    if edge['type'] != 'quantum':
        return None

    distance = edge['distance']
    base_decoherence_rate = edge['base_decoherence_rate']
    link_weight = edge['link_weight']
    environmental_factor = edge['environmental_factor']
    ent_swap_fail_prob = edge['ent_swap_fail_prob']
    
    # Enhanced decoherence probability calculation
    distance_decoherence = distance * base_decoherence_rate
    quality_decoherence = link_weight * 0.05
    env_decoherence = environmental_factor * 0.03
    
    total_decoherence_prob = distance_decoherence + quality_decoherence + env_decoherence
    
    failed_decoherence = random.random() < total_decoherence_prob
    failed_ent_swap = random.random() < ent_swap_fail_prob

    success = not (failed_decoherence or failed_ent_swap)

    print(f"Quantum link {u}-{v}: distance={distance}km, total_decoherence_prob={total_decoherence_prob:.3f}, "
          f"link_weight={link_weight:.2f}, env_factor={environmental_factor:.2f}, "
          f"total_cost={edge['total_cost']:.3f}, success={success}")

    return success

def simulate_classical_link(u, v, G):
    edge = G[u][v]
    if edge['type'] != 'classical':
        return None

    latency = edge['latency']
    packet_loss_prob = edge['packet_loss_prob']
    link_weight = edge['link_weight']
    bandwidth_factor = edge['bandwidth_factor']
    
    # Enhanced failure probability considering all factors
    base_loss = packet_loss_prob
    quality_loss = (link_weight - 1.0) * 0.02  # Higher weight = more loss
    bandwidth_loss = (2.0 - bandwidth_factor) * 0.01  # Lower bandwidth = more loss
    
    total_loss_prob = base_loss + quality_loss + bandwidth_loss
    total_loss_prob = max(0.0, min(1.0, total_loss_prob))  # Clamp to [0,1]
    
    lost = random.random() < total_loss_prob
    success = not lost

    print(f"Classical link {u}-{v}: latency={latency}ms, total_loss_prob={total_loss_prob:.3f}, "
          f"link_weight={link_weight:.2f}, bandwidth={bandwidth_factor:.2f}, "
          f"total_cost={edge['total_cost']:.3f}, success={success}")

    return success, latency

# ------------------ Enhanced Visualization ------------------ #

def visualize_network(G):
    pos = nx.spring_layout(G, seed=42)

    quantum_nodes = [n for n, d in G.nodes(data=True) if d['type'] == 'quantum']
    classical_nodes = [n for n, d in G.nodes(data=True) if d['type'] == 'classical']

    quantum_edges = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'quantum']
    classical_edges = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'classical']

    plt.figure(figsize=(12, 8))
    
    # Draw nodes
    nx.draw_networkx_nodes(G, pos, nodelist=quantum_nodes, node_color='skyblue', 
                          node_size=700, label='Quantum Node')
    nx.draw_networkx_nodes(G, pos, nodelist=classical_nodes, node_color='orange', 
                          node_size=700, label='Classical Node')

    # Draw edges with thickness based on cost (thinner = lower cost = better)
    for u, v in quantum_edges:
        cost = G[u][v]['total_cost']
        width = max(1, 5 - cost * 2)  # Thinner for lower cost
        nx.draw_networkx_edges(G, pos, edgelist=[(u, v)], edge_color='green', 
                              width=width, alpha=0.7)
    
    for u, v in classical_edges:
        cost = G[u][v]['total_cost']
        width = max(1, 5 - cost * 5)  # Thinner for lower cost
        nx.draw_networkx_edges(G, pos, edgelist=[(u, v)], edge_color='red', 
                              width=width, style='dashed', alpha=0.7)

    # Draw labels
    nx.draw_networkx_labels(G, pos, font_size=12, font_weight='bold')
    
    # Add cost labels on edges
    edge_labels = {}
    for u, v, d in G.edges(data=True):
        edge_labels[(u, v)] = f"{d['total_cost']:.2f}"
    
    nx.draw_networkx_edge_labels(G, pos, edge_labels, font_size=8)

    plt.title("Enhanced Hybrid Quantum-Classical Network\n(Edge thickness inversely proportional to cost)")
    plt.axis('off')
    
    # Custom legend
    import matplotlib.lines as mlines
    quantum_line = mlines.Line2D([], [], color='green', linewidth=2, label='Quantum Link')
    classical_line = mlines.Line2D([], [], color='red', linewidth=2, linestyle='--', label='Classical Link')
    quantum_node = mlines.Line2D([], [], color='skyblue', marker='o', linestyle='None', 
                                markersize=10, label='Quantum Node')
    classical_node = mlines.Line2D([], [], color='orange', marker='o', linestyle='None', 
                                  markersize=10, label='Classical Node')
    
    plt.legend(handles=[quantum_node, classical_node, quantum_line, classical_line], 
               loc='upper right')
    plt.tight_layout()
    plt.show()

# ------------------ Enhanced Hybrid Routing Protocol ------------------ #

def hybrid_route(source, target, G):
    print(f"\n🚦 Enhanced Hybrid Routing: Finding optimal path from {source} to {target}")
    
    # Display all possible paths with their costs
    try:
        all_paths = list(nx.all_simple_paths(G, source, target, cutoff=5))
        print(f"📊 Found {len(all_paths)} possible paths:")
        
        path_costs = []
        for i, path in enumerate(all_paths):
            total_cost = 0
            path_type = ""
            for u, v in zip(path, path[1:]):
                edge_cost = G[u][v]['total_cost']
                edge_type = G[u][v]['type']
                total_cost += edge_cost
                path_type += f"{edge_type[0].upper()}"
            
            path_costs.append((path, total_cost, path_type))
            print(f"  Path {i+1}: {' -> '.join(path)} | Cost: {total_cost:.3f} | Type: {path_type}")
        
        # Sort by cost and select best path
        path_costs.sort(key=lambda x: x[1])
        best_path, best_cost, best_type = path_costs[0]
        
        print(f"🎯 Selected optimal path: {' -> '.join(best_path)} (Cost: {best_cost:.3f})")
        
    except nx.NetworkXNoPath:
        print("❌ No path exists between source and target")
        return None

    def path_success(path):
        """Simulates the given path, returns True if all links succeed."""
        total_latency = 0
        for u, v in zip(path, path[1:]):
            edge = G[u][v]
            if edge['type'] == 'quantum':
                if not simulate_quantum_link(u, v, G):
                    print(f"❌ Quantum link failed: {u} -> {v}")
                    return False, (u, v)
            else:
                success, latency = simulate_classical_link(u, v, G)
                total_latency += latency
                if not success:
                    print(f"❌ Classical link failed: {u} -> {v}")
                    return False, (u, v)
        
        if total_latency > 0:
            print(f"📊 Total classical latency: {total_latency}ms")
        return True, None

    # Use NetworkX shortest path with weights (costs)
    try:
        optimal_path = nx.shortest_path(G, source=source, target=target, weight='weight')
        optimal_cost = nx.shortest_path_length(G, source=source, target=target, weight='weight')
        
        print(f"🔬 Attempting optimal cost path: {' -> '.join(optimal_path)} (Cost: {optimal_cost:.3f})")
        success, failed_link = path_success(optimal_path)
        
        if success:
            print("✅ Message sent successfully over optimal path.")
            return optimal_path
        else:
            print(f"❌ Optimal path failed at link: {failed_link}")
            
            # Try alternative paths with recovery
            temp_graph = G.copy()
            temp_graph.remove_edge(*failed_link)
            
            try:
                backup_path = nx.shortest_path(temp_graph, source=source, target=target, weight='weight')
                backup_cost = nx.shortest_path_length(temp_graph, source=source, target=target, weight='weight')
                
                print(f"🔄 Trying backup path: {' -> '.join(backup_path)} (Cost: {backup_cost:.3f})")
                success, _ = path_success(backup_path)
                
                if success:
                    print("✅ Message sent successfully over backup path.")
                    return backup_path
                else:
                    print("❌ Backup path also failed.")
                    
            except nx.NetworkXNoPath:
                print("❌ No backup path available.")
                
    except nx.NetworkXNoPath:
        print("❌ No path available.")
    
    return None

# ------------------ Run Enhanced Simulations ------------------ #

print("🔧 Network Statistics:")
print(f"Total nodes: {G.number_of_nodes()}")
print(f"Total edges: {G.number_of_edges()}")

quantum_edges = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'quantum']
classical_edges = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'classical']

print(f"Quantum edges: {len(quantum_edges)}")
print(f"Classical edges: {len(classical_edges)}")

# Show cost distribution
all_costs = [d['total_cost'] for u, v, d in G.edges(data=True)]
print(f"Cost range: {min(all_costs):.3f} - {max(all_costs):.3f}")
print(f"Average cost: {np.mean(all_costs):.3f}")

print("\n🛰️ Visualizing Enhanced Network:")
visualize_network(G)

print("\n🚀 Testing Enhanced Hybrid Routing:")

# Test routing between different node types
test_cases = [
    ('A', 'J'),  # Classical to Quantum
    ('F', 'E'),  # Quantum to Classical  
    ('F', 'J'),  # Quantum to Quantum
    ('A', 'E'),  # Classical to Classical
]

for source, target in test_cases:
    print(f"\n{'='*60}")
    path = hybrid_route(source, target, G)
    if path:
        total_cost = sum(G[u][v]['total_cost'] for u, v in zip(path, path[1:]))
        print(f"✅ Final successful path: {' -> '.join(path)} | Total cost: {total_cost:.3f}")
    else:
        print("❌ Routing failed")

def run_scalability_simulation():
    sizes = [10, 20, 40, 60, 80, 100]
    quantum_success_rates = []
    classical_success_rates = []
    decoherence_probs = []
    packet_loss_probs = []

    for size in sizes:
        # Build small hybrid network
        G = nx.Graph()
        node_count = size
        classical_nodes = [f'C{i}' for i in range(node_count // 2)]  # C0, C1, ...
        quantum_nodes = [f'Q{i}' for i in range(node_count // 2)]    # Q0, Q1, ...


        for node in classical_nodes:
            G.add_node(node, type='classical', entanglement_storage=False)
        for node in quantum_nodes:
            G.add_node(node, type='quantum', entanglement_storage=True)

        # Add random edges
        edges = []
        all_nodes = classical_nodes + quantum_nodes
        for _ in range(size * 2):  # add more links for bigger networks
            u, v = random.sample(all_nodes, 2)
            if G.has_edge(u, v):
                continue
            if G.nodes[u]['type'] == 'quantum' and G.nodes[v]['type'] == 'quantum':
                link_type = 'quantum'
            else:
                link_type = 'classical'
            edges.append((u, v, link_type))

        # Add edges with costs
        for u, v, link_type in edges:
            if link_type == 'quantum':
                distance = random.randint(10, 100)
                rate = random.uniform(0.008, 0.015)
                weight = random.uniform(0.5, 2.0)
                env = random.uniform(0.8, 1.5)
                fail_prob = random.uniform(0.05, 0.2)
                decohere_prob = distance * rate + weight * 0.05 + env * 0.03
                cost = calculate_quantum_cost(distance, rate, weight, env)
                G.add_edge(u, v, type='quantum', total_cost=cost,
                           distance=distance,
                           base_decoherence_rate=rate,
                           link_weight=weight,
                           environmental_factor=env,
                           ent_swap_fail_prob=fail_prob,
                           weight=cost)
            else:
                latency = random.randint(10, 50)
                loss = random.uniform(0.01, 0.1)
                weight = random.uniform(0.5, 2.0)
                bandwidth = random.uniform(0.8, 1.5)
                loss_prob = loss + (weight - 1.0)*0.02 + (2.0 - bandwidth)*0.01
                cost = calculate_classical_cost(latency, loss, weight, bandwidth)
                G.add_edge(u, v, type='classical', total_cost=cost,
                           latency=latency,
                           packet_loss_prob=loss,
                           link_weight=weight,
                           bandwidth_factor=bandwidth,
                           weight=cost)

        # Test links
        quantum_links = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'quantum']
        classical_links = [(u, v) for u, v, d in G.edges(data=True) if d['type'] == 'classical']

        quantum_success = sum(simulate_quantum_link(u, v, G) for u, v in quantum_links)
        classical_success = sum(simulate_classical_link(u, v, G)[0] for u, v in classical_links)

        quantum_success_rate = quantum_success / max(1, len(quantum_links))
        classical_success_rate = classical_success / max(1, len(classical_links))
        avg_decoherence = np.mean([G[u][v]['distance'] * G[u][v]['base_decoherence_rate']
                                   for u, v in quantum_links]) if quantum_links else 0
        avg_loss = np.mean([G[u][v]['packet_loss_prob'] for u, v in classical_links]) if classical_links else 0

        quantum_success_rates.append(quantum_success_rate)
        classical_success_rates.append(classical_success_rate)
        decoherence_probs.append(avg_decoherence)
        packet_loss_probs.append(avg_loss)

    # Plotting
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.plot(sizes, quantum_success_rates, 'g-o', label='Quantum Success Rate')
    plt.plot(sizes, classical_success_rates, 'r-o', label='Classical Success Rate')
    plt.xlabel("Network Size (nodes)")
    plt.ylabel("Success Rate")
    plt.title("Link Success Rate vs. Network Size")
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(sizes, decoherence_probs, 'b--o', label='Avg Decoherence Prob')
    plt.plot(sizes, packet_loss_probs, 'm--o', label='Avg Packet Loss Prob')
    plt.xlabel("Network Size (nodes)")
    plt.ylabel("Failure Probabilities")
    plt.title("Quantum vs Classical Link Reliability")
    plt.legend()

    plt.tight_layout()
    plt.show()
print("\n📊 Running Scalability Simulation:")
run_scalability_simulation()
